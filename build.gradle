apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'


sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

mainClassName = 'org.asamk.signal.Main'

version = '0.7.4'

compileJava.options.encoding = 'UTF-8'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation 'com.github.turasa:signal-service-java:2.15.3_unofficial_16'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.68'
    implementation 'net.sourceforge.argparse4j:argparse4j:0.8.1'
    implementation 'com.github.hypfvieh:dbus-java:3.2.4'
    implementation 'org.slf4j:slf4j-simple:1.7.30'
}

buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "gradle.plugin.org.mikeneck:graalvm-native-image-plugin:1.1.0"
  }
}

apply plugin: 'org.mikeneck.graalvm-native-image'

jar {
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Main-Class': project.mainClassName,
        )
    }
}

run {
    if (project.hasProperty("appArgs")) {
        // allow passing command-line arguments to the main application e.g.:
        // $ gradle run -PappArgs="['-u', '+...', 'daemon', '--json']"
        args Eval.me(appArgs)
    }
}

// Find any 3rd party libraries which have released new versions
// to the central Maven repo since we last upgraded.
task checkLibVersions {
    doLast {
        def checked = [:]
        allprojects {
            configurations.each { configuration ->
                configuration.allDependencies.each { dependency ->
                    def version = dependency.version
                    if (!checked[dependency]) {
                        def group = dependency.group
                        def path = group.replace('.', '/')
                        def name = dependency.name
                        def url = "https://repo1.maven.org/maven2/$path/$name/maven-metadata.xml"
                        try {
                            def metadata = new XmlSlurper().parseText(url.toURL().text)
                            def newest = metadata.versioning.latest;
                            if ("$version" != "$newest") {
                                println "UPGRADE {\"group\": \"$group\", \"name\": \"$name\", \"current\": \"$version\", \"latest\": \"$newest\"}"
                            }
                        } catch (FileNotFoundException e) {
                            logger.debug "Unable to download $url: $e.message"
                        } catch (org.xml.sax.SAXParseException e) {
                            logger.debug "Unable to parse $url: $e.message"
                        }
                        checked[dependency] = true
                    }
                }
            }
        }
    }
}

nativeImage {
  graalVmHome = '/home/bernhard/Downloads/graalvm-ce-java11-20.3.0'  //System.getProperty('java.home')
  mainClass = project.mainClassName
  executableName = 'my-native-application'
  outputDirectory = file("$buildDir/bin")
  arguments {
    add '--no-fallback'
    add '--enable-all-security-services'
    add options.traceClassInitialization('com.example.MyDataProvider,com.example.MyDataConsumer')
    add '--initialize-at-run-time=com.example.runtime'
    add '--report-unsupported-elements-at-runtime'
	add '--allow-incomplete-classpath'
	add '-H:IncludeResourceBundles=net.sourceforge.argparse4j.internal.ArgumentParserImpl'
  }
}
